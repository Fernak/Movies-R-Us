{"ast":null,"code":"var _jsxFileName = \"/Users/nolan/Documents/Software Dev/CPSC471 Project/src/components/forms/AddReviewForm.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Button } from 'react-bootstrap';\nimport styled from 'styled-components';\nimport { Form, Input, Rating } from 'semantic-ui-react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function AddReviewForm(props) {\n  _s();\n\n  const [userRating, setUserRating] = useState(0);\n  const [review, setReview] = useState('');\n  var obj;\n  var Uid = props.Uid;\n  var Email = props.userEmail;\n\n  function closeReview() {\n    props.setTrigger(false);\n    setUserRating(0);\n    setReview('');\n  }\n  /*\n   * Creating request object and getting reponse from API after adding a user review to a certain movie \n   * Flask Movie API Example: https://www.youtube.com/watch?v=Urx8Kj00zsI\n   */\n\n\n  async function submitReview() {\n    if (review == '') {\n      console.log('error! Description cannot be empty');\n      alert('Description field cannot be empty!');\n    } else {\n      const request = {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          Uid: Uid,\n          Email: Email,\n          Rating: userRating,\n          Description: review\n        })\n      }; // Referenced: Handling response status using fetch in react JS\n\n      await fetch('/userreview', request).then(response => {\n        if (response.ok) {\n          return response.json();\n        }\n      }).then(data => {\n        console.log(data);\n        obj = data;\n      });\n      props.onAddedReview({\n        Author: obj['Username'],\n        Date: obj['Date'],\n        Description: review,\n        Rating: userRating\n      });\n      props.setTrigger(false);\n      setUserRating(0);\n      setReview('');\n    }\n  }\n  /*References: \n      * Creating a add review popup form where users can add a review: \n          * Build a POPUP component in React JS ~ A Beginner Tutorial with React https://www.youtube.com/watch?v=i8fAO_zyFAM */\n\n\n  return props.trigger ? /*#__PURE__*/_jsxDEV(Popup, {\n    children: /*#__PURE__*/_jsxDEV(ReviewForm, {\n      children: [/*#__PURE__*/_jsxDEV(Form, {\n        children: [/*#__PURE__*/_jsxDEV(CloseBtn, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"default\",\n            style: {\n              background: \"#9FFFCB\"\n            },\n            onClick: closeReview,\n            children: \"X\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 31\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: /*#__PURE__*/_jsxDEV(Rating, {\n            icon: \"star\",\n            maxRating: 5,\n            value: userRating,\n            onRate: (_, data) => {\n              setUserRating(data.rating);\n            }\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(Form.Field, {\n          children: /*#__PURE__*/_jsxDEV(Input, {\n            placeholder: \"Write your review here\",\n            value: review,\n            onChange: event => setReview(event.target.value)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 21\n        }, this), /*#__PURE__*/_jsxDEV(SubmitBtn, {\n          children: /*#__PURE__*/_jsxDEV(Button, {\n            variant: \"default\",\n            style: {\n              background: \"#9FFFCB\"\n            },\n            onClick: submitReview,\n            children: \"Submit\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 63,\n            columnNumber: 32\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 63,\n          columnNumber: 21\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 17\n      }, this), props.children]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 13\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 9\n  }, this) : \"\";\n}\n\n_s(AddReviewForm, \"4v5qh7wvjuxLTxYH6gUrQoqf1cY=\");\n\n_c = AddReviewForm;\n;\nconst Popup = styled.div`\n    display: flex; \n    justify-content: center; \n    align-items: center; \n    position: fixed; \n    top: 0; \n    left: 0; \n    width: 100%; \n    height: 100vh;  \n    background-color: rgba(0, 0, 0, 0.2);\n`;\n_c2 = Popup;\nconst ReviewForm = styled.div`\n    position: relative; \n    width: 700px; \n    padding: 10px;  \n    background-color: white; \n    border-radius: 10px;\n`;\n_c3 = ReviewForm;\nconst CloseBtn = styled.div`\n    margin-top: 0px; \n    margin-bottom: 10px;  \n    margin-left: 645px;   \n`;\n_c4 = CloseBtn;\nconst SubmitBtn = styled.div`\n    margin-top = 10px;  \n    margin-left: 600px;\n`;\n_c5 = SubmitBtn;\n\nvar _c, _c2, _c3, _c4, _c5;\n\n$RefreshReg$(_c, \"AddReviewForm\");\n$RefreshReg$(_c2, \"Popup\");\n$RefreshReg$(_c3, \"ReviewForm\");\n$RefreshReg$(_c4, \"CloseBtn\");\n$RefreshReg$(_c5, \"SubmitBtn\");","map":{"version":3,"sources":["/Users/nolan/Documents/Software Dev/CPSC471 Project/src/components/forms/AddReviewForm.js"],"names":["React","useState","Button","styled","Form","Input","Rating","AddReviewForm","props","userRating","setUserRating","review","setReview","obj","Uid","Email","userEmail","closeReview","setTrigger","submitReview","console","log","alert","request","method","headers","body","JSON","stringify","Description","fetch","then","response","ok","json","data","onAddedReview","Author","Date","trigger","background","_","rating","event","target","value","children","Popup","div","ReviewForm","CloseBtn","SubmitBtn"],"mappings":"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","sourcesContent":["import React, {useState} from 'react'\nimport {Button} from 'react-bootstrap'\nimport styled from 'styled-components'\nimport {Form, Input, Rating} from 'semantic-ui-react'\n\nexport default function AddReviewForm(props){\n    const [userRating, setUserRating] = useState(0)\n    const [review, setReview] = useState('')\n    var obj; \n    var Uid = props.Uid\n    var Email = props.userEmail \n\n    function closeReview(){\n        props.setTrigger(false)\n        setUserRating(0)\n        setReview('') \n    }\n\n    /*\n     * Creating request object and getting reponse from API after adding a user review to a certain movie \n     * Flask Movie API Example: https://www.youtube.com/watch?v=Urx8Kj00zsI\n     */\n    async function submitReview(){\n        if (review == ''){\n            console.log('error! Description cannot be empty')\n            alert('Description field cannot be empty!')\n        } \n        else{\n            const request = {\n                method: 'POST', \n                headers: { 'Content-Type': 'application/json' },\n                body: JSON.stringify({ Uid: Uid, Email: Email, Rating: userRating, Description: review})\n            }\n            // Referenced: Handling response status using fetch in react JS\n            await fetch('/userreview', request).then(response => {\n                if (response.ok){\n                    return response.json()\n                }\n            }).then(data => { \n                console.log(data)\n                obj = data\n                }); \n            props.onAddedReview({Author: obj['Username'], Date: obj['Date'], Description: review, Rating: userRating})\n            props.setTrigger(false)\n            setUserRating(0)\n            setReview('')   \n        }    \n    }\n    /*References: \n        * Creating a add review popup form where users can add a review: \n            * Build a POPUP component in React JS ~ A Beginner Tutorial with React https://www.youtube.com/watch?v=i8fAO_zyFAM */\n    return (props.trigger)?(\n        <Popup>\n            <ReviewForm>\n                <Form>\n                    <CloseBtn><Button variant=\"default\"style={{background: \"#9FFFCB\"}} onClick={closeReview}>X</Button></CloseBtn>\n                    <Form.Field>\n                        <Rating icon='star' maxRating={5} value={userRating} onRate={(_, data) => {setUserRating(data.rating)}}/> \n                    </Form.Field>\n                    <Form.Field>\n                        <Input placeholder=\"Write your review here\" value={review} onChange={event => setReview(event.target.value)}/>\n                    </Form.Field>\n                    <SubmitBtn><Button variant=\"default\"style={{background: \"#9FFFCB\" }} onClick={submitReview}>Submit</Button></SubmitBtn>\n                </Form>\n                {props.children}    \n            </ReviewForm>             \n        </Popup>\n    ) : \"\"; \n}; \n\nconst Popup = styled.div `\n    display: flex; \n    justify-content: center; \n    align-items: center; \n    position: fixed; \n    top: 0; \n    left: 0; \n    width: 100%; \n    height: 100vh;  \n    background-color: rgba(0, 0, 0, 0.2);\n`\n\nconst ReviewForm = styled.div `\n    position: relative; \n    width: 700px; \n    padding: 10px;  \n    background-color: white; \n    border-radius: 10px;\n`\n\nconst CloseBtn = styled.div`\n    margin-top: 0px; \n    margin-bottom: 10px;  \n    margin-left: 645px;   \n`\nconst SubmitBtn = styled.div`\n    margin-top = 10px;  \n    margin-left: 600px;\n`\n"]},"metadata":{},"sourceType":"module"}