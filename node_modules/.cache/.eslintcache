[{"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\index.js":"1","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\App.js":"2","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\PrivateRoute.js":"3","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\Dashboard.js":"4","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Home.js":"5","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Profile.js":"6","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\login\\SignUp.js":"7","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\login\\ForgotPassword.js":"8","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\contexts\\AuthContext.js":"9","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\login\\Login.js":"10","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\TVShows.js":"11","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Movies.js":"12","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\ProfileEdit.js":"13","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Subscriptions.js":"14","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\CrewDetails.js":"15","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Favourites.js":"16","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\ProgramDetails.js":"17","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\SideBarItem.js":"18","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\firebase.js":"19","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\ProgramCard.js":"20","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\CrewCard.js":"21","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\SubCard.js":"22","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\ReviewCard.js":"23","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\forms\\AddServiceForm.js":"24","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\forms\\AddReviewForm.js":"25","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Schedule.js":"26","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\SearchPage.js":"27","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\UserCard.js":"28"},{"size":306,"mtime":1618547308534,"results":"29","hashOfConfig":"30"},{"size":2524,"mtime":1618732126931,"results":"31","hashOfConfig":"30"},{"size":477,"mtime":1618547308280,"results":"32","hashOfConfig":"30"},{"size":4816,"mtime":1618736391556,"results":"33","hashOfConfig":"30"},{"size":3346,"mtime":1618729707077,"results":"34","hashOfConfig":"30"},{"size":3671,"mtime":1618727819393,"results":"35","hashOfConfig":"30"},{"size":3686,"mtime":1618731522875,"results":"36","hashOfConfig":"30"},{"size":2350,"mtime":1618731337857,"results":"37","hashOfConfig":"30"},{"size":1234,"mtime":1618547308512,"results":"38","hashOfConfig":"30"},{"size":2330,"mtime":1618731344595,"results":"39","hashOfConfig":"30"},{"size":2880,"mtime":1618729666578,"results":"40","hashOfConfig":"30"},{"size":2815,"mtime":1618727811005,"results":"41","hashOfConfig":"30"},{"size":6350,"mtime":1618728091781,"results":"42","hashOfConfig":"30"},{"size":3461,"mtime":1618729432847,"results":"43","hashOfConfig":"30"},{"size":5822,"mtime":1618727787049,"results":"44","hashOfConfig":"30"},{"size":2251,"mtime":1618727798092,"results":"45","hashOfConfig":"30"},{"size":12367,"mtime":1618733115062,"results":"46","hashOfConfig":"30"},{"size":1923,"mtime":1618733167147,"results":"47","hashOfConfig":"30"},{"size":587,"mtime":1618547308524,"results":"48","hashOfConfig":"30"},{"size":1290,"mtime":1618732580875,"results":"49","hashOfConfig":"30"},{"size":1384,"mtime":1618732603085,"results":"50","hashOfConfig":"30"},{"size":4485,"mtime":1618732988540,"results":"51","hashOfConfig":"30"},{"size":2555,"mtime":1618732672076,"results":"52","hashOfConfig":"30"},{"size":4747,"mtime":1618730902656,"results":"53","hashOfConfig":"30"},{"size":4575,"mtime":1618730246974,"results":"54","hashOfConfig":"30"},{"size":3774,"mtime":1618728835268,"results":"55","hashOfConfig":"30"},{"size":3269,"mtime":1618729163777,"results":"56","hashOfConfig":"30"},{"size":2286,"mtime":1618733071923,"results":"57","hashOfConfig":"30"},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},"8klal3",{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"69","usedDeprecatedRules":"60"},{"filePath":"70","messages":"71","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"72","usedDeprecatedRules":"60"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"60"},{"filePath":"78","messages":"79","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"80","messages":"81","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"60"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87","usedDeprecatedRules":"60"},{"filePath":"88","messages":"89","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"90","usedDeprecatedRules":"60"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"93","usedDeprecatedRules":"60"},{"filePath":"94","messages":"95","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"96","usedDeprecatedRules":"60"},{"filePath":"97","messages":"98","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99","usedDeprecatedRules":"60"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"102","messages":"103","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"60"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"110","messages":"111","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"114","messages":"115","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"60"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"119","usedDeprecatedRules":"60"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"60"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"125","usedDeprecatedRules":"60"},{"filePath":"126","messages":"127","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\index.js",[],["128","129"],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\App.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\PrivateRoute.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\Dashboard.js",["130"],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Home.js",["131"],"/**\r\n * Home page: \r\n *  * General user: \r\n *      * Shows all movies and tv shows that exist in the database \r\n *  * Admin user: \r\n *      * Shows the list of all users and the number of users that are using the system \r\n */\r\nimport React, {useState, useEffect} from 'react'\r\nimport styled from 'styled-components'\r\nimport Dashboard from '../Dashboard'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\nimport UserCard from '../../cards/UserCard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function Home() {\r\n    const user = firebase.auth().currentUser;\r\n    var userEmail = user.email\r\n\r\n    const [admins, setAdmins] = useState([]);\r\n    const [users, setUsers] = useState([]);\r\n    const [movies, setMovies] = useState([]);\r\n    const [tvshows, setTvshows] = useState([]);\r\n\r\n    // API call to get the list of all admin emails \r\n    useEffect(() => {\r\n        fetch(`/admin`).then(response =>\r\n            response.json()).then(data => {\r\n                setAdmins(data);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get all programs that exist in the database \r\n    useEffect(() => {\r\n        fetch(`/allprograms`).then(response =>\r\n            response.json()).then(data => {\r\n                setMovies(data['movies']);\r\n                setTvshows(data['tvshows']);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get all users that exist in the database (will be displayed in admin home page)\r\n    useEffect(() => {\r\n        fetch(`/allusers?Email=${userEmail}`).then(response =>\r\n            response.json()).then(data => {\r\n                setUsers(data['users']);\r\n            });\r\n    }, []);\r\n\r\n    // Check if user logged in is a general user and display the corresponding results (all movies and tv shows)\r\n    if (!(admins.some(admin => admin.Email === userEmail))){\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1>Movies</h1>\r\n                </Header>\r\n                <Scroll><ProgramCard programs={movies}/></Scroll>\r\n                <Header2>\r\n                    <h1>TV Shows</h1>\r\n                </Header2>\r\n                <Scroll><ProgramCard programs={tvshows}/></Scroll>\r\n            </>\r\n        )\r\n    // Displaying list of all users and the number of users for the admin home page \r\n    } else {\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1>User Count: </h1>\r\n                    <h2>{users.length}</h2>\r\n                </Header>\r\n                <Header>\r\n                    <h1>List of Users: </h1>\r\n                </Header>\r\n                <Container><UserCard users={users} /></Container>\r\n\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Home page UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 70px;\r\n`\r\nconst Header2 = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 50px;\r\n    margin-bottom: 0px; \r\n`\r\n\r\nconst Container = styled.div`\r\n    margin-left: 0px; \r\n    margin-top: 0px;\r\n`\r\n\r\n/*\r\n * References: \r\n * Making Scrollable sections within a page: \r\n *      How To Make A Div Vertically Scrollable Using CSS https://www.youtube.com/watch?v=uB1KzjV0IhM \r\n */\r\nconst Scroll = styled.div`\r\n    height: 400px; \r\n    overflow: hidden; \r\n    overflow-y: auto; \r\n`\r\n","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Profile.js",["132","133"],"/**\r\n * Profile Page: \r\n *  * Shows all information of the user that is logged in \r\n */\r\nimport React, { useState, useEffect } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport styled from 'styled-components'\r\nimport Dashboard from '../Dashboard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function Profile() {\r\n    var user = firebase.auth().currentUser;\r\n    var userEmail = user.email;\r\n\r\n    const [userDetails, setUserDetails] = useState([]);\r\n\r\n    // API call to get all inforation of a specific user \r\n    useEffect(() => {\r\n        fetch(`/profile?Email=${userEmail}`).then(response =>\r\n            response.json()).then(data => {\r\n                console.log(data)\r\n                setUserDetails([data['userInfo']])\r\n\r\n            });\r\n    }, []);\r\n\r\n    // Profile Page UI \r\n    return (\r\n        <>\r\n            <Dashboard />\r\n            {userDetails.map(details => (\r\n                <div>\r\n                    <Header>\r\n                        <h1>My Profile</h1>\r\n                    </Header>\r\n\r\n                    <div>\r\n                        <Image>\r\n                            <img style={{ width: \"160px\", height: \"160px\" }} src=\"https://upload.wikimedia.org/wikipedia/en/thumb/f/fb/UofCCoat.svg/1200px-UofCCoat.svg.png\" alt=\"\" />\r\n                        </Image>\r\n                        <Email><h2>{userEmail}</h2></Email>\r\n                        {/*<ChangeBtn><Button>Change Password</Button></ChangeBtn>*/}\r\n                        <Box>\r\n                            <Title>\r\n                                <h3 style={{marginTop: \"30px\"}}>Pesonal Information: </h3>\r\n                            </Title>\r\n                            <Text>\r\n                                <h5 style={{marginTop: \"0px\"}}>Name: {details.Name}</h5>\r\n                                <h5 style={{marginTop: \"0px\"}}>Username: {details.Username}</h5>\r\n                                <h5 style={{marginTop: \"0px\"}}>Age: {details.Age}</h5>\r\n                                <h5 style={{marginTop: \"0px\"}}>Gender: {details.Gender}</h5>\r\n                                <h5 style={{marginTop: \"0px\"}}>Languages: {details.Language}</h5>\r\n                            </Text>\r\n                            <EditLink><Link to=\"/profile-edit\">Edit Information</Link></EditLink>\r\n                        </Box>\r\n                    </div>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\n/**\r\n * Profile page UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 10px;\r\n`\r\nconst Image = styled.div` \r\n    border-radius: 80px; \r\n    margin-left: 700px; \r\n    margin-top: 50px;\r\n`\r\n\r\nconst Email = styled.div`\r\n    margin-left: 680px; \r\n    margin-top: 10px;\r\n`\r\nconst ChangeBtn = styled.div`\r\n    margin-left: 1000px; \r\n    margin-top: 20px;\r\n`\r\n\r\n/**\r\n * References: \r\n *  * Build a Recipe App With React | React Tutorial For Beginners https://www.youtube.com/watch?v=U9T6YkEDkMo&list=PLDyQo7g0_nsVHmyZZpVJyFn5ojlboVEhE&index=2 \r\n * */\r\nconst Box = styled.div`\r\n    margin-top: 50px; \r\n    border-radius: 10px;\r\n    box-shadow: 0px 12px 18px -6px rgba(0, 0, 0, 0.3);  \r\n    margin-left: 400px; \r\n    background: white;\r\n    height: 210px; \r\n    width: 800px; \r\n`\r\n\r\n/**\r\n * References: \r\n *  * Build a Recipe App With React | React Tutorial For Beginners https://www.youtube.com/watch?v=U9T6YkEDkMo&list=PLDyQo7g0_nsVHmyZZpVJyFn5ojlboVEhE&index=2 \r\n * */\r\nconst Title = styled.div`\r\n    margin-top: 30px;\r\n    margin-left: 20px;\r\n`\r\nconst Text = styled.div`\r\n    margin-top: 10px;\r\n    margin-left: 60px;\r\n`\r\nconst EditLink = styled(Link)`\r\n    margin-left: 650px; \r\n`","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\login\\SignUp.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\login\\ForgotPassword.js",["134"],"/**\r\n * Forgot Password Page: \r\n *  Shows the page where a user can reset their password from the login page. (Uses firebase authentication)\r\n */\r\nimport React, { useRef, useState } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { useAuth } from '../../contexts/AuthContext'\r\nimport { Link } from \"react-router-dom\"\r\n\r\nexport default function ForgotPassword() {\r\n    const emailRef = useRef()\r\n    const { resetPassword } = useAuth()\r\n    const [error, setError] = useState(\"\")\r\n    const [message, setMessage] = useState(\"\")\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    /**\r\n     * Handling the click event of the reset password button \r\n     */\r\n    async function handleSubmit(e) {\r\n        e.preventDefault()\r\n\r\n        try {\r\n            setMessage('')\r\n            setError('')\r\n            setLoading(true)\r\n\r\n            //Firebase call to reset password by email\r\n            //await resetPassword(emailRef.current.value)\r\n            //setMessage('Check your inbox for further instructions.')\r\n        } catch {\r\n            setError('Failed to reset password')\r\n        }\r\n        setLoading(false)\r\n    }\r\n\r\n    /**\r\n     * Forgot Password UI \r\n     */\r\n    return (\r\n        <>\r\n            <Card>\r\n                <Card.Body>\r\n                    <h2 className=\"text-center mb-4\">Reset Password</h2>\r\n                    {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                    {message && <Alert variant=\"success\">{message}</Alert>}\r\n                    <Form onSubmit={handleSubmit}>\r\n                        <Form.Group id=\"email\">\r\n                            <Form.Label>Email</Form.Label>\r\n                            <Form.Control type=\"email\" ref={emailRef} required />\r\n                        </Form.Group>\r\n                        <Button disabled={loading} className=\"w-100\" type=\"submit\">\r\n                            Reset Password\r\n                        </Button>\r\n                    </Form>\r\n                    <div className=\"w-100 text-center mt-3\">\r\n                        <Link to=\"/login\">Login</Link>\r\n                    </div>\r\n                </Card.Body>\r\n            </Card>\r\n            <div className=\"w-100 text-center mt-2\">\r\n                Need an account? <Link to=\"/signup\">Sign Up</Link>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\contexts\\AuthContext.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\login\\Login.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\TVShows.js",["135"],"/**\r\n * Movies page: \r\n *  * General user: \r\n *      * Shows all tv shows that are offered by streaming services the user is subscribed to \r\n *  * Admin user: \r\n *      * Shows all tv shows in the database \r\n */\r\nimport React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Dashboard from '../Dashboard'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function TVShows() {\r\n    const user = firebase.auth().currentUser;\r\n    var userEmail = user.email\r\n    \r\n    /**\r\n     * References: \r\n     *  * How to call an api endpoint and get the data to pass to Program card component \r\n     *      * How to Call a Flask API in React https://www.youtube.com/watch?v=06pWsB_hoD4&t=0s\r\n     */\r\n    const[admins, setAdmins] = useState([])\r\n    const [tvshows, setTvshows] = useState([]); \r\n    const [allTvshows, setAllTvshows] = useState([])\r\n\r\n    //API call to get list of all admin emails\r\n    useEffect(() => {\r\n        fetch(`/admin`).then(response =>\r\n            response.json()).then(data => {\r\n                setAdmins(data);\r\n            });\r\n    }, []);\r\n\r\n    //API call to get all the tv shows that are from services that the user is subscribed to (will be used when user is not an admin) \r\n    useEffect(()=>{\r\n        fetch(`/programs?Type=TV Show&Email=${userEmail}`).then(response => \r\n            response.json()).then(data => { \r\n                setTvshows(data); \r\n            }); \r\n    }, []); \r\n\r\n    // API call to get all tv shows that exist in the database (will be used when user is an admin)\r\n    useEffect(() => {\r\n        fetch(`/allprograms`).then(response =>\r\n            response.json()).then(data => {\r\n                setAllTvshows(data['tvshows']);\r\n            });\r\n    }, []);\r\n\r\n    // Checking if user logged in is a general user and display the corresponding results (tvshows filtered by streaming services)\r\n    if (!(admins.some(admin => admin.Email === userEmail))){\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1 className=\"pageHeader\">TV Shows</h1>\r\n                </Header>\r\n                {/*Passing the object to the ProgramCard component*/}\r\n                <ProgramCard programs={tvshows}/>\r\n            </>\r\n        )\r\n    // Displaying all tv shwos that exists in the database to an admin user \r\n    } else {\r\n        return (\r\n            <>\r\n                <Dashboard />\r\n                <Header>\r\n                    <h1>Movies</h1>\r\n                </Header>\r\n                {/*Passing the object to the ProgramCard component*/}\r\n                <ProgramCard programs={allTvshows} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * TV Show UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 10px;\r\n`","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Movies.js",["136"],"/**\r\n * Movies page: \r\n *  * General user: \r\n *      * Shows all movies that are offered by streaming services the user is subscribed to \r\n *  * Admin user: \r\n *      * Shows all movies in the database \r\n */\r\nimport React, { useEffect, useState } from 'react'\r\nimport styled from 'styled-components'\r\nimport Dashboard from '../Dashboard'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function Movies() {\r\n    const user = firebase.auth().currentUser;\r\n    var userEmail = user.email\r\n\r\n    /**\r\n     * References: \r\n     *  * How to call an api endpoint and get the data to pass to Program card component \r\n     *      * How to Call a Flask API in React https://www.youtube.com/watch?v=06pWsB_hoD4&t=0s\r\n     */\r\n    const [admins, setAdmins] = useState([])\r\n    const [userMovies, setUserMovies] = useState([])\r\n    const [allMovies, setAllMovies] = useState([])\r\n\r\n    // API call to get list of all admin emails\r\n    useEffect(() => {\r\n        fetch(`/admin`).then(response =>\r\n            response.json()).then(data => {\r\n                setAdmins(data);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get all programs that from services the user is subscribed to (will be used when user is not an admin) \r\n    useEffect(() => {\r\n        fetch(`/programs?Type=Movie&Email=${userEmail}`).then(response =>\r\n            response.json()).then(data => {\r\n                setUserMovies(data);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get all programs that exist in the database (will be used when user is an admin)\r\n    useEffect(() => {\r\n        fetch(`/allprograms`).then(response =>\r\n            response.json()).then(data => {\r\n                setAllMovies(data['movies']);\r\n            });\r\n    }, []);\r\n\r\n    // Checking if user logged in is aa general user and display the corresponding results (movies filtered by streaming services)\r\n    if (!(admins.some(admin => admin.Email === userEmail))){\r\n        return (\r\n            <>\r\n                <Dashboard />\r\n                <Header>\r\n                    <h1>Movies</h1>\r\n                </Header>\r\n                {/*Passing the object to the ProgramCard component*/}\r\n                <ProgramCard programs={userMovies} />\r\n            </>\r\n        )\r\n    // Displaying all movies in the database \r\n    } else {\r\n        return (\r\n            <>\r\n                <Dashboard />\r\n                <Header>\r\n                    <h1>Movies</h1>\r\n                </Header>\r\n                {/*Passing the object to the ProgramCard component*/}\r\n                <ProgramCard programs={allMovies} />\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Movies page UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 10px;\r\n`\r\n","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\ProfileEdit.js",["137","138"],"/**\r\n * Profile Edit Page: \r\n *  * Shows a form where the user can edit their personal information \r\n */\r\nimport React, { useRef, useState, useEffect } from 'react'\r\nimport { Form, Button, Card, Alert } from 'react-bootstrap'\r\nimport { Link, useHistory } from \"react-router-dom\"\r\nimport Dashboard from '../Dashboard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\n\r\nexport default function ProfileEdit() {\r\n    var user = firebase.auth().currentUser;\r\n    var userEmail = user.email;\r\n\r\n    const [userDetails, setUserDetails] = useState([]);\r\n\r\n    const passwordRef = useRef()\r\n    const [password, setPassword] = useState('')\r\n    const nameRef = useRef()\r\n    const [name, setName] = useState('')\r\n    const usernameRef = useRef()\r\n    const [username, setUsername] = useState('')\r\n    const ageRef = useRef()\r\n    const [age, setAge] = useState(0)\r\n    const genderRef = useRef()\r\n    const [gender, setGender] = useState('')\r\n    const languageRef = useRef()\r\n    const [language, setLanguage] = useState('')\r\n    const [error, setError] = useState('')\r\n    const history = useHistory()\r\n\r\n    // API call to get all the infromation of the user (Info beofre edit/update)\r\n    useEffect(() => {\r\n        fetch(`/profile?Email=${userEmail}`).then(response =>\r\n            response.json()).then(data => {\r\n                console.log(data)\r\n                setUserDetails([data['userInfo']])\r\n            });\r\n    }, []);\r\n\r\n    // Handling the click even of the edit profile button \r\n    async function updateUserDatabase(e) {\r\n        e.preventDefault();\r\n\r\n        if (nameRef.current.value === '') {\r\n            setName(userDetails.map(a => a.Name));\r\n        } else {\r\n            setName(nameRef.current.value)\r\n        }\r\n        if (usernameRef.current.value !== '') {\r\n            setUsername(usernameRef.current.value)\r\n        } else {\r\n            setUsername(userDetails.map(a => a.Username))\r\n        }\r\n        if (ageRef.current.value !== '') {\r\n            setAge(parseInt(ageRef.current.value))\r\n        } else {\r\n            setAge(userDetails.map(a => a.Age))\r\n        }\r\n        if (genderRef.current.value !== '') {\r\n            setGender(genderRef.current.value)\r\n        } else {\r\n            setGender(userDetails.map(a => a.Gender))\r\n        }\r\n        if (languageRef.current.value !== '') {\r\n            setLanguage(languageRef.current.value)\r\n        } else {\r\n            setLanguage(userDetails.map(a => a.Language))\r\n        }\r\n        if (passwordRef.current.value !== '') {\r\n            user.updatePassword(passwordRef.current.value).then(function () {\r\n                console.log(\"Update successful.\")\r\n            }).catch(function (error) {\r\n                console.log(\"An error happened.\")\r\n            });\r\n            setPassword(passwordRef.current.value)\r\n        }\r\n\r\n        // Creating a equest object for the API call to update user information  \r\n        const request = {\r\n            method: 'POST',\r\n            headers: { 'Content-Type': 'application/json' },\r\n            body: JSON.stringify({\r\n                Name: name,\r\n                Username: username,\r\n                Email: userEmail,\r\n                Age: age,\r\n                Gender: gender,\r\n                Language: language,\r\n                Password: password\r\n            })\r\n        }\r\n        console.log(request)\r\n        // API call to update user information and to redirect back to the profile page when update was successful \r\n        await fetch('/profile-edit', request).then(response => {\r\n            if (response.ok) {\r\n                console.log('User updated')\r\n                return history.push(\"/profile\")\r\n            }\r\n        });\r\n    }\r\n\r\n    // Profile edit page UI \r\n    return (\r\n        <>\r\n            <Dashboard />\r\n            <Card className=\"d-flex align-items-center justify-content-center\"\r\n                style={{ minHeight: \"100vh\" }}>\r\n                <div className=\"w-100\" style={{ maxWidth: '400px' }}>\r\n                    <Card.Body>\r\n                        <h2 className=\"text-center mb-4\">Edit Profile</h2>\r\n                        {error && <Alert variant=\"danger\">{error}</Alert>}\r\n                        <Form onSubmit={updateUserDatabase}>\r\n                            {/* Name */}\r\n                            <Form.Group id=\"name\">\r\n                                <Form.Label>Name</Form.Label>\r\n                                <Form.Control type=\"text\" ref={nameRef} />\r\n                            </Form.Group>\r\n                            {/* Username */}\r\n                            <Form.Group id=\"username\">\r\n                                <Form.Label>Username</Form.Label>\r\n                                <Form.Control type=\"text\" ref={usernameRef} />\r\n                            </Form.Group>\r\n                            {/* Age */}\r\n                            <Form.Group id=\"age\">\r\n                                <Form.Label>Age</Form.Label>\r\n                                <Form.Control type=\"text\" ref={ageRef} />\r\n                            </Form.Group>\r\n                            {/* Gender */}\r\n                            <Form.Group id=\"gender\">\r\n                                <Form.Label>Gender</Form.Label>\r\n                                <Form.Control type=\"text\" ref={genderRef} />\r\n                            </Form.Group>\r\n                            {/* Language */}\r\n                            <Form.Group id=\"language\">\r\n                                <Form.Label>Language</Form.Label>\r\n                                <Form.Control type=\"text\" ref={languageRef} />\r\n                            </Form.Group>\r\n                            {/* Password */}\r\n                            <Form.Group id=\"password\">\r\n                                <Form.Label>Password</Form.Label>\r\n                                <Form.Control type=\"password\" ref={passwordRef} />\r\n                            </Form.Group>\r\n                            <Button className=\"w-100\" type='submit'>Sign Up</Button>\r\n                        </Form>\r\n                    </Card.Body>\r\n                    <div className=\"w-100 text-center mt-2\">\r\n                        Don't want to edit profile? <Link to=\"/profile\">Cancel</Link>\r\n                    </div>\r\n                </div>\r\n            </Card>\r\n        </>\r\n    )\r\n}","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Subscriptions.js",["139","140"],"/**\r\n * Subscription page: \r\n *  * General user: \r\n *      * Shows all the streaming services that the user is subscribed to \r\n *  * Admin user: \r\n *      * Shows the list of all streaming services that exist in the database \r\n */\r\nimport React, {useState, useEffect} from 'react'\r\nimport styled from 'styled-components'\r\nimport {Button} from 'semantic-ui-react'\r\nimport Dashboard from '../Dashboard'\r\nimport SubCard from '../../cards/SubCard'\r\nimport AddServiceForm from '../../forms/AddServiceForm'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function Subscriptions() {\r\n    const user = firebase.auth().currentUser\r\n    var userEmail = user.email\r\n\r\n    const [admins, setAdmins] = useState([])\r\n    const [addServiceBtn, setAddServiceBtn] = useState(false); \r\n    const [userSubs, setUserSubs] = useState([]); \r\n    const [allServices, setAllServices] = useState([])\r\n\r\n    //API call to get the list of all admin emails\r\n    useEffect(() => {\r\n        fetch(`/admin`).then(response =>\r\n            response.json()).then(data => {\r\n                setAdmins(data);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get list of all available streaming services \r\n    useEffect(()=>{\r\n        fetch('/services').then(response => \r\n            response.json()).then(data => { \r\n                setAllServices(data)\r\n            }); \r\n    }, []); \r\n\r\n    // API call to get the list of streaming servies that the user is subscribed to \r\n    useEffect(()=>{\r\n        fetch(`/usersubscriptions?Email=${userEmail}`).then(response => \r\n            response.json()).then(data => { \r\n                setUserSubs(data); \r\n            }); \r\n    }, []); \r\n\r\n    // Checking if user logged in is an a general user and display the corresponding info (only the services that they are subscribed to)\r\n    if (!(admins.some(admin => admin.Email === userEmail))){\r\n        /**References: How to update UI when adding and removing services:  \r\n         *  * How to Call a Flask API in React: https://www.youtube.com/watch?v=06pWsB_hoD4\r\n        */\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1>My Subscriptions</h1>\r\n                </Header>\r\n                <AddBtn><Button color='blue' onClick={() => setAddServiceBtn(true)}>Add Service</Button></AddBtn>\r\n                <SubCard services={userSubs} userEmail={userEmail} adminStatus={false} onRemovedService={serviceRemoved => setUserSubs(userSubs.filter(service => service['Service_name'] != serviceRemoved))}/>\r\n                <AddServiceForm trigger={addServiceBtn} setTrigger={setAddServiceBtn} userEmail={userEmail} userServices={userSubs} allServices={allServices} onAddedService={newService => setUserSubs(currentServices => [...currentServices, newService])}/>\r\n            </>\r\n        )\r\n    // Displaing list of all services (admin user is NOT given the option to remove a streaming service)\r\n    } else {\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1>All Services</h1>\r\n                </Header>\r\n                <SubCard services={allServices} userEmail={userEmail} adminStatus={true}/>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Subscription UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 70px;\r\n`\r\nconst AddBtn = styled.div `\r\n    margin-left: 1060px; \r\n    margin-top: 10px;\r\n`\r\n","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\CrewDetails.js",["141","142","143"],"/**\r\n * Crew details page: \r\n *  * Shows all information of a specific crew member. Includes crew member information and programs the crew member is involved in\r\n */\r\nimport React, {useState, useEffect} from 'react'\r\nimport {Button} from 'semantic-ui-react'\r\nimport styled from 'styled-components'\r\nimport Dashboard from '../Dashboard'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function CrewDetails(props) {\r\n    const user = firebase.auth().currentUser\r\n    var userEmail = user.email\r\n    var Cid = props.location.state['Cid']\r\n    var favCrew = [] \r\n    var favStatus\r\n\r\n    const [crewDetails, setCrewDetails] = useState([])\r\n    const [crewPrograms, setCrewPrograms] = useState([])\r\n    const [crewRoles, setCrewRoles] = useState([])\r\n    const [userFavCrew, setUserFavCrew] = useState([]); \r\n\r\n    //API call to get all details of a specific crew member. Crew member is identified by a unique Cid. \r\n    useEffect(() => {\r\n        fetch(`/crewdetails?Cid=${Cid}`).then(response =>\r\n            response.json()).then(data => {\r\n                setCrewDetails([data['crewinfo']])\r\n                setCrewPrograms(data['crewprograms'])\r\n                setCrewRoles(data['crewroles'])\r\n                console.log(props.location.state['Cid'])\r\n            });\r\n    }, []);\r\n\r\n    //API call to get a list of call the crew members favourtied by the user logged in. \r\n    useEffect(()=>{\r\n        fetch(`/userfavs?Email=${userEmail}`).then(response => \r\n            response.json()).then(data => { \r\n                setUserFavCrew(data['favouritecrew'])\r\n            }); \r\n    }, []); \r\n\r\n    //Getting the Cid of all the user favourited crew members \r\n    for (var i=0; i<userFavCrew.length; i++){\r\n            favCrew.push(userFavCrew[i]['Cid'])\r\n    }\r\n    \r\n    //Checking if the crew member has already been added to the user's favourite \r\n    if (favCrew.includes(Cid)){\r\n        favStatus = true; \r\n    }\r\n    else {\r\n        favStatus = false; \r\n    } \r\n\r\n    // Handling the click event of the favourite button \r\n    async function addOrRemoveFavourite(){\r\n        // Request to add the crew member to user favourites \r\n        if (favStatus == false){ \r\n            const request = {\r\n                method: 'POST', \r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ Email: userEmail,  Uid: '', Cid: Cid})\r\n            }\r\n            console.log(request)\r\n            const response = await fetch('/userfavs', request); \r\n            if (response.ok){\r\n                console.log('Added to favourites added')\r\n                alert('Crew has been successfully added to your favourites')      \r\n            } else{\r\n                console.log('Not successful')\r\n            }\r\n            favStatus = true\r\n        }\r\n        // Request to remove crew member from user's favourites \r\n        else{\r\n            const request = {\r\n                method: 'DELETE', \r\n                headers: { 'Content-Type': 'application/json' },\r\n            }\r\n            const response = await fetch(`/userfavs?Email=${userEmail}&Cid=${Cid}`, request); \r\n            if (response.ok){\r\n                console.log('Removed from favourtes')\r\n                alert('Crew has been successfully removed from your favourites')\r\n            } else{\r\n                console.log('Remove not successful')\r\n            }\r\n            favStatus = false; \r\n        } \r\n    }\r\n\r\n    // Crew details page UI\r\n    return (\r\n        <>\r\n            <Dashboard />\r\n            {crewDetails.map(details => (\r\n                <div>\r\n                    <Top>\r\n                        <Image><img style={{width: \"240px\", height: \"330px\"}} src={details.Image} alt=\"\" /></Image>\r\n                        <div style={{ marginLeft: \"50px\" }}>\r\n                            <Title><h1>{details.Name}</h1></Title>\r\n                            <div>\r\n                                <Text><h3>Gender: {details.Name}</h3></Text>\r\n                                <Text><h3>Hometown: {details.Hometown}</h3></Text>\r\n                                <Text1><h3>Roles:</h3></Text1>\r\n                                {crewRoles.map(roles => (\r\n                                    <h4 style={{ marginLeft: \"50px\", marginTop: \"0px\", marginBottom: \"2px\" }}>{roles.Crew_role}</h4>\r\n                                ))}\r\n                            </div>\r\n                        </div>\r\n                    </Top>\r\n                    <AddFavBtn><Button color='blue' style={{height: \"40px\"}} onClick={addOrRemoveFavourite}>Favourite</Button></AddFavBtn>\r\n                    <Header><h2>Filmography</h2></Header>\r\n                    <Scroll><ProgramCard programs={crewPrograms} /></Scroll>\r\n                </div>\r\n            ))}\r\n        </>\r\n    )\r\n}\r\n\r\n/**\r\n * Crew details UI styling \r\n */\r\nconst Top = styled.div`\r\n    display: flex; \r\n    margin-top: 80px;\r\n    margin-left: 180px; \r\n`\r\nconst Title = styled.div`\r\n    margin-right: 0px; \r\n    margin-bottom: 20px; \r\n`\r\nconst Text = styled.div`\r\n    margin-left: 30px; \r\n    margin-top: 0px; \r\n    margin-bottom: 20px; \r\n`\r\nconst Text1 = styled.div`\r\n    margin-left: 30px; \r\n    margin-top: 0px; \r\n    margin-bottom: 5px; \r\n`\r\n\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 50px;\r\n`\r\nconst Image = styled.div` \r\n    margin-left: 90px; \r\n    margin-right: 0px;   \r\n`\r\nconst AddFavBtn = styled.div`\r\n    margin-left: 340px; \r\n    margin-top: 20px;\r\n`\r\n\r\n/*\r\n * References: \r\n * Making Scrollable sections within a page: \r\n *      How To Make A Div Vertically Scrollable Using CSS https://www.youtube.com/watch?v=uB1KzjV0IhM \r\n */\r\nconst Scroll = styled.div`\r\n    height: 400px; \r\n    overflow: hidden; \r\n    overflow-y: auto; \r\n`\r\n","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Favourites.js",["144"],"/**\r\n * Favourites page: \r\n *  * Shows all favourites of a specific user. Includes the user's favourite crew members, movies, and tv shows. \r\n */\r\nimport React, {useEffect, useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport Dashboard from '../Dashboard'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\nimport CrewCard from '../../cards/CrewCard'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function Favourites() {\r\n    const user = firebase.auth().currentUser\r\n    var userEmail = user.email\r\n\r\n    const [favCrew, setFavCrew] = useState([]);\r\n    const [favMovies, setFavMovies] = useState([]); \r\n    const [favTvshows, setFavTvshows] = useState([]); \r\n\r\n    // API call to get all favourites of the user logged in. (User favourite crew members, movies nad tv shows)\r\n    useEffect(()=>{\r\n        fetch(`/userfavs?Email=${userEmail}`).then(response => \r\n            response.json()).then(data => { \r\n                setFavCrew(data['favouritecrew']); \r\n                setFavMovies(data['favouritemovies'])\r\n                setFavTvshows(data['favouriteshows'])\r\n            }); \r\n    }, []); \r\n    \r\n    //Favourites page UI \r\n    return (\r\n        <>\r\n            <Dashboard/>\r\n            <Header>\r\n                <h1>My Favourite Crew</h1>\r\n            </Header>\r\n            <Scroll><CrewCard programCrew={favCrew}/></Scroll>\r\n            <Header2>\r\n                <h1>My Favourite Movies</h1>\r\n            </Header2>\r\n            <Scroll><ProgramCard programs={favMovies}/></Scroll>\r\n            <Header2>\r\n                <h1>My Favourite TV Shows</h1>\r\n            </Header2>\r\n            <Scroll><ProgramCard programs={favTvshows}/></Scroll>\r\n        </>\r\n    )\r\n}\r\n\r\n/**\r\n * Favourites page UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 70px;\r\n`\r\nconst Header2 = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 50px;\r\n`\r\n\r\n/*\r\n * References: \r\n * Making Scrollable sections within a page: \r\n *      How To Make A Div Vertically Scrollable Using CSS https://www.youtube.com/watch?v=uB1KzjV0IhM \r\n */\r\nconst Scroll = styled.div`\r\n    height: 350px; \r\n    padding-bottom: 50px; \r\n    overflow: hidden; \r\n    overflow-y: auto; \r\n`","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\ProgramDetails.js",["145","146","147","148","149","150","151"],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\SideBarItem.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\firebase.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\ProgramCard.js",["152"],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\CrewCard.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\SubCard.js",["153"],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\ReviewCard.js",[],"C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\forms\\AddServiceForm.js",["154","155","156","157"],"/**\r\n * Add Service Form popup \r\n *  * Popup componenet that is displayed when the user clicks on the \"Add Service\" button on the subscription page \r\n */\r\nimport React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport {Form, Select, Button} from 'semantic-ui-react'\r\n\r\nexport default function AddServiceForm(props){\r\n    var Email = props.userEmail\r\n    var allServices = props.allServices\r\n    var userServices = props.userServices\r\n    var selectOptions = []\r\n\r\n    const [service, setService] = useState('')\r\n\r\n    /**Generating the list of services the user has not added to their account and and can be added. Will be used to \r\n     * populate the drop-down select menu. \r\n       References: \r\n        * Checking if an a certain value is within in any of the objects in the array list \r\n            * https://www.tutorialrepublic.com/faq/how-to-check-if-an-array-includes-an-object-in-javascript.php */\r\n    for (var i=0; i<allServices.length; i++){\r\n        if (!(userServices.some(userServices => userServices.Service_name === allServices[i]['Service_name']))){\r\n            var newObj = {key: allServices[i]['Sid'], text: allServices[i]['Service_name'], value: allServices[i]['Sid']}\r\n            selectOptions.push(newObj)\r\n        }\r\n    }\r\n\r\n    // Handling the click event of the \"x\" button on the popup (will close popup)\r\n    function closeReview(){\r\n        props.setTrigger(false)\r\n        setService('')\r\n    }\r\n\r\n    /*\r\n     * Handling the click event of the \"Add\" button on the popup (popup will close and newly added service will be dislayed on the screen)\r\n     * Creating request object and getting reponse from API after adding a user review to a certain movie \r\n     * Flask Movie API Example: https://www.youtube.com/watch?v=Urx8Kj00zsI\r\n     */\r\n    async function addService(){\r\n        // Checking to make a streaming service from the drop-down menu has been selected \r\n        if (service == ''){\r\n            alert('Error! Please select a service from the list')\r\n        } \r\n        // Creating a request object with Email of the user and the service selected by the user \r\n        else{\r\n            const request = {\r\n                method: 'POST', \r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ Email: Email, Service_name: service})\r\n            }\r\n            // API call to add a new service for the user \r\n            const response = await fetch('/usersubscriptions', request); \r\n            if (response.ok){\r\n                console.log('Service added')\r\n                var serviceAdded = allServices.find(object => object.Service_name == service)\r\n                props.onAddedService(serviceAdded)\r\n                selectOptions.filter(selectOptions=>selectOptions.Id!=service)\r\n                props.setTrigger(false)\r\n                setService('')  \r\n            } else{\r\n                console.log('Not successful')\r\n            }\r\n        }    \r\n    }\r\n    /** \r\n     * Add Service popup UI \r\n     * References: \r\n        * Creating a add review popup form where users can add a review: \r\n            * Build a POPUP component in React JS ~ A Beginner Tutorial with React https://www.youtube.com/watch?v=i8fAO_zyFAM */\r\n    return (props.trigger)?(\r\n        <Popup>\r\n            <ServiceForm>\r\n                <Form>\r\n                    <Top>\r\n                        <h2>Add a service</h2>\r\n                        <CloseBtn><Button variant=\"default\" onClick={closeReview} icon='close'></Button></CloseBtn>\r\n                    </Top>\r\n                    <Select style={{marginLeft: \"80px\", width: \"250px\"}} options={selectOptions} placeholder='Select Service' onChange={event => setService(event.target.textContent)}/>\r\n                    <SubmitBtn><Button color='blue' variant=\"default\" onClick={addService}>Add</Button></SubmitBtn>\r\n                </Form>\r\n                {props.children}    \r\n            </ServiceForm>             \r\n        </Popup>\r\n    ) : \"\"; \r\n}; \r\n\r\n/**\r\n * Add Service popup UI styling \r\n */\r\nconst Popup = styled.div `\r\n    display: flex; \r\n    justify-content: center; \r\n    align-items: center; \r\n    position: fixed; \r\n    top: 0; \r\n    left: 0; \r\n    width: 100%; \r\n    height: 100vh;  \r\n    background-color: rgba(0, 0, 0, 0.2);\r\n`\r\n\r\nconst ServiceForm = styled.div `\r\n    position: relative; \r\n    width: 455px; \r\n    padding: 10px;  \r\n    background-color: white; \r\n    border-radius: 10px;\r\n`\r\n\r\nconst Top = styled.div`\r\n    display: flex;  \r\n    margin-bottom: 0px; \r\n`\r\n\r\nconst CloseBtn = styled.div`\r\n    margin-top: 0px; \r\n    margin-bottom: 10px;  \r\n    margin-left: 250px;   \r\n`\r\nconst SubmitBtn = styled.div`\r\n    margin-top = 10px;  \r\n    margin-left: 360px;\r\n`","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\forms\\AddReviewForm.js",["158"],"/**\r\n * Add Review Form popup \r\n *  * Popup componenet that is displayed when the user clicks on the \"Add Review\" button on the program details page\r\n */\r\nimport React, {useState} from 'react'\r\nimport styled from 'styled-components'\r\nimport {Form, Input, Rating, Button} from 'semantic-ui-react'\r\n\r\nexport default function AddReviewForm(props){\r\n    const [userRating, setUserRating] = useState(0)\r\n    const [review, setReview] = useState('')\r\n    var obj; \r\n    var Uid = props.Uid\r\n    var Email = props.userEmail \r\n\r\n    // Handling the click event of the \"x\" button on the popup (will close the popup and reset the rating and decription values)\r\n    function closeReview(){\r\n        props.setTrigger(false)\r\n        setUserRating(0)\r\n        setReview('') \r\n    }\r\n\r\n    /*\r\n     * Handling the click event of the \"Submit\" button on the popup (popup will close and newly added review will be dislayed on the screen)\r\n     * References: \r\n     *  * Creating request object and getting reponse from API after adding a user review to a certain movie: \r\n     *      * Flask Movie API Example: https://www.youtube.com/watch?v=Urx8Kj00zsI\r\n     */\r\n    async function submitReview(){\r\n        // Checking to make sure description field of an review is NOT empty \r\n        if (review == ''){\r\n            console.log('error! Description cannot be empty')\r\n            alert('Description field cannot be empty!')\r\n        } \r\n        // Creating a request object with info and the review inputs entered by the user \r\n        else{\r\n            const request = {\r\n                method: 'POST', \r\n                headers: { 'Content-Type': 'application/json' },\r\n                body: JSON.stringify({ Uid: Uid, Email: Email, Rating: userRating, Description: review})\r\n            }\r\n            /**\r\n             * API call to add a new review of a specific program \r\n             * References: \r\n             *  * Handling response status using fetch in react JS: https://jasonwatmore.com/post/2020/02/01/react-fetch-http-post-request-examples*/ \r\n            await fetch('/userreview', request).then(response => {\r\n                if (response.ok){\r\n                    return response.json()\r\n                }\r\n            }).then(data => { \r\n                console.log(data)\r\n                obj = data\r\n                }); \r\n            props.onAddedReview({Author: obj['Username'], Date: obj['Date'], Description: review, Rating: userRating})\r\n            props.setTrigger(false)\r\n            setUserRating(0)\r\n            setReview('')   \r\n        }    \r\n    }\r\n    /*\r\n     * Add Review popup UI \r\n     * References: \r\n        * Creating a add review popup form where users can add a review: \r\n            * Build a POPUP component in React JS ~ A Beginner Tutorial with React https://www.youtube.com/watch?v=i8fAO_zyFAM */\r\n    return (props.trigger)?(\r\n        <Popup>\r\n            <ReviewForm>\r\n                <Form>\r\n                    <Top>\r\n                        <h2 style={{width: \"300px\"}}>Add a review</h2>\r\n                        <CloseBtn><Button variant=\"default\" onClick={closeReview} icon='close'/></CloseBtn>\r\n                    </Top>\r\n                    <Form.Field>\r\n                        <Rating size=\"huge\" icon='star' maxRating={5} value={userRating} onRate={(_, data) => {setUserRating(data.rating)}}/> \r\n                    </Form.Field>\r\n                    <Form.Field>\r\n                        <Input placeholder=\"Write your review here\" value={review} onChange={event => setReview(event.target.value)}/>\r\n                    </Form.Field>\r\n                    <SubmitBtn><Button color='blue' variant=\"default\" onClick={submitReview}>Submit</Button></SubmitBtn>\r\n                </Form>\r\n                {props.children}    \r\n            </ReviewForm>             \r\n        </Popup>\r\n    ) : \"\"; \r\n}; \r\n\r\n/**\r\n * Add review popup UI styling \r\n */\r\nconst Popup = styled.div `\r\n    display: flex; \r\n    justify-content: center; \r\n    align-items: center; \r\n    position: fixed; \r\n    top: 0; \r\n    left: 0; \r\n    width: 100%; \r\n    height: 100vh;  \r\n    background-color: rgba(0, 0, 0, 0.2);\r\n`\r\n\r\nconst ReviewForm = styled.div `\r\n    position: relative; \r\n    width: 700px; \r\n    padding: 10px;  \r\n    background-color: white; \r\n    border-radius: 10px;\r\n`\r\n\r\nconst Top = styled.div`\r\n    display: flex;  \r\n    margin-bottom: 0px; \r\n`\r\n\r\nconst CloseBtn = styled.div`\r\n    margin-top: 0px; \r\n    margin-bottom: 10px;  \r\n    margin-left: 400px;   \r\n`\r\nconst SubmitBtn = styled.div`\r\n    margin-top = 10px;  \r\n    margin-left: 590px;\r\n`","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\Schedule.js",["159"],"/**\r\n * Schdeule Page: \r\n *  * General user: \r\n *      * Shows all the programs that are coming to or leaving the streaming services that the user is subscribed to \r\n *  * Admin user: \r\n *      * Shows all program that are coming to or leaving any streaming service within the database \r\n */\r\nimport React, {useState, useEffect} from 'react'\r\nimport Dashboard from '../Dashboard'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\nimport styled from 'styled-components'\r\n\r\nimport firebase from \"firebase/app\";\r\nimport \"firebase/auth\";\r\n\r\nexport default function Schedule() {\r\n    const user = firebase.auth().currentUser\r\n    var userEmail = user.email\r\n\r\n    const [admins, setAdmins] = useState([])\r\n    const [userComingPrograms, setUserComingPrograms] = useState([])\r\n    const [userLeavingPrograms, setUserLeavingPrograms] = useState([])\r\n    const [allComingPrograms, setAllComingPrograms] = useState([])\r\n    const [allLeavingPrograms, setAllLeavingPrograms] = useState([])\r\n\r\n    // API call to get the list of all admin emails \r\n    useEffect(() => {\r\n        fetch(`/admin`).then(response =>\r\n            response.json()).then(data => {\r\n                setAdmins(data);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get programs that are coming are leaving soon that are offered by services the user logged in is subscribed (will be used when user is not an admin)\r\n    useEffect(() => {\r\n        fetch(`/userprogramschedule?Email=${userEmail}`).then(response =>\r\n            response.json()).then(data => {\r\n                setUserComingPrograms(data['comingsoon']);\r\n                setUserLeavingPrograms(data['leavingsoon']);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get all programs that are coming are leaving soon that are offered by any service (will be used when user is an admin)\r\n    useEffect(() => {\r\n        fetch(`/allprogramschedule`).then(response =>\r\n            response.json()).then(data => {\r\n                setAllComingPrograms(data['comingsoon']);\r\n                setAllLeavingPrograms(data['leavingsoon']);\r\n            });\r\n    }, []);\r\n\r\n    // Checking if user logged in is a general user and display the corresponding results (filtered programs by subscribed services)\r\n    if (!(admins.some(admin => admin.Email === userEmail))){\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1 >Coming Soon</h1>\r\n                </Header>\r\n                <Scroll><ProgramCard programs={userComingPrograms}/></Scroll>\r\n                <Header2>\r\n                    <h1>Leaving Soon</h1>\r\n                </Header2>\r\n                <Scroll><ProgramCard programs={userLeavingPrograms}/></Scroll>\r\n            </>\r\n        )\r\n    // Displaying all programs that are coming to and leaving any service to the admin user \r\n    } else {\r\n        return (\r\n            <>\r\n                <Dashboard/>\r\n                <Header>\r\n                    <h1 >Coming Soon</h1>\r\n                </Header>\r\n                <Scroll><ProgramCard programs={allComingPrograms}/></Scroll>\r\n                <Header2>\r\n                    <h1>Leaving Soon</h1>\r\n                </Header2>\r\n                <Scroll><ProgramCard programs={allLeavingPrograms}/></Scroll>\r\n            </>\r\n        )\r\n    }\r\n}\r\n\r\n/**\r\n * Schedule UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 70px;\r\n`\r\nconst Header2 = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 50px;\r\n`\r\n\r\n/*\r\n * References: \r\n * Making Scrollable sections within a page: \r\n *      How To Make A Div Vertically Scrollable Using CSS https://www.youtube.com/watch?v=uB1KzjV0IhM \r\n */\r\nconst Scroll = styled.div`\r\n    height: 400px; \r\n    overflow: hidden; \r\n    overflow-y: auto; \r\n`\r\n","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\dashboard\\pages\\SearchPage.js",["160"],"/**\r\n * Search Page: \r\n *  * Shows all the results found from a user search \r\n */\r\nimport React, {useState, useEffect} from 'react'\r\nimport Dashboard from '../Dashboard'\r\nimport styled from 'styled-components'\r\nimport ProgramCard from '../../cards/ProgramCard'\r\nimport CrewCard from '../../cards/CrewCard'\r\n\r\nexport default function SearchPage(props) {\r\n    var input = props.location.state['Input']\r\n    input = input.toLowerCase()\r\n    input = input.trim()\r\n\r\n    console.log(input)\r\n    var programsMatched = [] \r\n    var crewMatched = []\r\n\r\n    const [programs, setPrograms] = useState([]);\r\n    const [crew, setCrew] = useState([]);\r\n\r\n    // API call to get a list of ALL programs that exist in the database \r\n    useEffect(() => {\r\n        fetch(`/allprograms`).then(response =>\r\n            response.json()).then(data => {\r\n                setPrograms([...data['movies'], ...data['tvshows']]);\r\n            });\r\n    }, []);\r\n\r\n    // API call to get a list of ALL crew members that exist in the data base \r\n    useEffect(() => {\r\n        fetch(`/allcrew`).then(response =>\r\n            response.json()).then(data => {\r\n                setCrew(data);\r\n            });\r\n    }, []);\r\n\r\n    // Searching through and checking if the user input in the search bar is of program(s) that exist in the database \r\n    for (var i=0; i<programs.length; i++){\r\n        if(input === (programs[i]['Name']).toLowerCase() || (programs[i]['Name']).toLowerCase().includes(input)){\r\n            programsMatched.push({Uid: programs[i]['Uid'], Image: programs[i]['Image']})\r\n        }\r\n    }\r\n\r\n    // Searching through and checking if the user input in the search bar is of crew member(s) that exist in the database\r\n    for (var i=0; i<crew.length; i++){\r\n        if(input === (crew[i]['Name']).toLowerCase() || (crew[i]['Name']).toLowerCase().includes(input)){\r\n            crewMatched.push({Cid: crew[i]['Cid'], Image: crew[i]['Image'], Name: crew[i]['Name']})\r\n        }\r\n    }\r\n\r\n    // Checking if no search results were found and display \"No results matching\" message \r\n    if (programsMatched.length === 0 && crewMatched.length === 0){\r\n        return (\r\n            <>\r\n            <Dashboard/>\r\n            <Header>\r\n                <h1>Search Results: No results matching </h1>\r\n            </Header>\r\n            </>\r\n        )\r\n    }\r\n    // Checking if the search result found is of crew members and display all crew members as card components on the page \r\n    else if (programsMatched.length === 0 && crewMatched.length !== 0){\r\n        return (\r\n            <>\r\n            <Dashboard/>\r\n            <Header>\r\n                <h1>Search Results: {input} </h1>\r\n            </Header>\r\n            <CrewCard programCrew={crewMatched}/>\r\n            </>\r\n        )\r\n    }\r\n    // Checking if the search result found is of programs and display all programs as card components on the page \r\n    else {\r\n        return (\r\n            <>\r\n            <Dashboard/>\r\n            <Header>\r\n                <h1>Search Results: {input}</h1>\r\n            </Header>\r\n            <ProgramCard programs={programsMatched}/>\r\n            </>\r\n        )\r\n\r\n    }\r\n}\r\n\r\n/**\r\n * Search page UI styling \r\n */\r\nconst Header = styled.div`\r\n    margin-left: 240px; \r\n    margin-top: 70px;\r\n`","C:\\Users\\Tiffa\\CPSC471_2\\Movies-R-Us\\src\\components\\cards\\UserCard.js",[],{"ruleId":"161","replacedBy":"162"},{"ruleId":"163","replacedBy":"164"},{"ruleId":"165","severity":1,"message":"166","line":16,"column":13,"nodeType":"167","messageId":"168","endLine":16,"endColumn":24},{"ruleId":"169","severity":1,"message":"170","line":49,"column":8,"nodeType":"171","endLine":49,"endColumn":10,"suggestions":"172"},{"ruleId":"169","severity":1,"message":"170","line":27,"column":8,"nodeType":"171","endLine":27,"endColumn":10,"suggestions":"173"},{"ruleId":"165","severity":1,"message":"174","line":82,"column":7,"nodeType":"167","messageId":"168","endLine":82,"endColumn":16},{"ruleId":"165","severity":1,"message":"175","line":12,"column":13,"nodeType":"167","messageId":"168","endLine":12,"endColumn":26},{"ruleId":"169","severity":1,"message":"170","line":43,"column":8,"nodeType":"171","endLine":43,"endColumn":10,"suggestions":"176"},{"ruleId":"169","severity":1,"message":"170","line":43,"column":8,"nodeType":"171","endLine":43,"endColumn":10,"suggestions":"177"},{"ruleId":"165","severity":1,"message":"178","line":32,"column":19,"nodeType":"167","messageId":"168","endLine":32,"endColumn":27},{"ruleId":"169","severity":1,"message":"170","line":42,"column":8,"nodeType":"171","endLine":42,"endColumn":10,"suggestions":"179"},{"ruleId":"169","severity":1,"message":"170","line":49,"column":8,"nodeType":"171","endLine":49,"endColumn":10,"suggestions":"180"},{"ruleId":"181","severity":1,"message":"182","line":63,"column":187,"nodeType":"183","messageId":"184","endLine":63,"endColumn":189},{"ruleId":"169","severity":1,"message":"185","line":35,"column":8,"nodeType":"171","endLine":35,"endColumn":10,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"170","line":43,"column":8,"nodeType":"171","endLine":43,"endColumn":10,"suggestions":"187"},{"ruleId":"181","severity":1,"message":"188","line":61,"column":23,"nodeType":"183","messageId":"184","endLine":61,"endColumn":25},{"ruleId":"169","severity":1,"message":"170","line":30,"column":8,"nodeType":"171","endLine":30,"endColumn":10,"suggestions":"189"},{"ruleId":"169","severity":1,"message":"190","line":41,"column":8,"nodeType":"171","endLine":41,"endColumn":10,"suggestions":"191"},{"ruleId":"169","severity":1,"message":"170","line":49,"column":8,"nodeType":"171","endLine":49,"endColumn":10,"suggestions":"192"},{"ruleId":"181","severity":1,"message":"188","line":67,"column":23,"nodeType":"183","messageId":"184","endLine":67,"endColumn":25},{"ruleId":"193","severity":1,"message":"194","line":105,"column":13,"nodeType":"195","endLine":105,"endColumn":17},{"ruleId":"196","severity":1,"message":"197","line":106,"column":41,"nodeType":"198","messageId":"199","endLine":106,"endColumn":43},{"ruleId":"181","severity":1,"message":"188","line":108,"column":34,"nodeType":"183","messageId":"184","endLine":108,"endColumn":36},{"ruleId":"181","severity":1,"message":"188","line":156,"column":38,"nodeType":"183","messageId":"184","endLine":156,"endColumn":40},{"ruleId":"200","severity":1,"message":"201","line":22,"column":13,"nodeType":"195","endLine":22,"endColumn":119},{"ruleId":"181","severity":1,"message":"188","line":40,"column":24,"nodeType":"183","messageId":"184","endLine":40,"endColumn":26},{"ruleId":"202","severity":1,"message":"203","line":23,"column":33,"nodeType":"198","messageId":"204","endLine":23,"endColumn":109},{"ruleId":"181","severity":1,"message":"188","line":42,"column":21,"nodeType":"183","messageId":"184","endLine":42,"endColumn":23},{"ruleId":"181","severity":1,"message":"188","line":56,"column":83,"nodeType":"183","messageId":"184","endLine":56,"endColumn":85},{"ruleId":"181","severity":1,"message":"182","line":58,"column":69,"nodeType":"183","messageId":"184","endLine":58,"endColumn":71},{"ruleId":"181","severity":1,"message":"188","line":31,"column":20,"nodeType":"183","messageId":"184","endLine":31,"endColumn":22},{"ruleId":"169","severity":1,"message":"170","line":41,"column":8,"nodeType":"171","endLine":41,"endColumn":10,"suggestions":"205"},{"ruleId":"206","severity":1,"message":"207","line":47,"column":14,"nodeType":"167","messageId":"208","endLine":47,"endColumn":15},"no-native-reassign",["209"],"no-negated-in-lhs",["210"],"no-unused-vars","'currentUser' is assigned a value but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'userEmail'. Either include it or remove the dependency array.","ArrayExpression",["211"],["212"],"'ChangeBtn' is assigned a value but never used.","'resetPassword' is assigned a value but never used.",["213"],["214"],"'setError' is assigned a value but never used.",["215"],["216"],"eqeqeq","Expected '!==' and instead saw '!='.","BinaryExpression","unexpected","React Hook useEffect has missing dependencies: 'Cid' and 'props.location.state'. Either include them or remove the dependency array.",["217"],["218"],"Expected '===' and instead saw '=='.",["219"],"React Hook useEffect has a missing dependency: 'Uid'. Either include it or remove the dependency array.",["220"],["221"],"jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","JSXOpeningElement","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","no-loop-func","Function declared in a loop contains unsafe references to variable(s) 'i'.","unsafeRefs",["222"],"no-redeclare","'i' is already defined.","redeclared","no-global-assign","no-unsafe-negation",{"desc":"223","fix":"224"},{"desc":"223","fix":"225"},{"desc":"223","fix":"226"},{"desc":"223","fix":"227"},{"desc":"223","fix":"228"},{"desc":"223","fix":"229"},{"desc":"230","fix":"231"},{"desc":"223","fix":"232"},{"desc":"223","fix":"233"},{"desc":"234","fix":"235"},{"desc":"223","fix":"236"},{"desc":"223","fix":"237"},"Update the dependencies array to be: [userEmail]",{"range":"238","text":"239"},{"range":"240","text":"239"},{"range":"241","text":"239"},{"range":"242","text":"239"},{"range":"243","text":"239"},{"range":"244","text":"239"},"Update the dependencies array to be: [Cid, props.location.state]",{"range":"245","text":"246"},{"range":"247","text":"239"},{"range":"248","text":"239"},"Update the dependencies array to be: [Uid]",{"range":"249","text":"250"},{"range":"251","text":"239"},{"range":"252","text":"239"},[1654,1656],"[userEmail]",[806,808],[1525,1527],[1509,1511],[1441,1443],[1681,1683],[1363,1365],"[Cid, props.location.state]",[1673,1675],[1152,1154],[1692,1694],"[Uid]",[2066,2068],[1673,1675]]